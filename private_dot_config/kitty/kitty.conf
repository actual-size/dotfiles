# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{

editor .

font_family Fira Code Retina
font_size   13.0

disable_ligatures cursor

# dotted zero, old style numbers and lightweight dollar sign
font_features FiraCode-Light_Retina +zero +onum +ss04

cursor #cccccc
cursor_text_color #111111

cursor_blink_interval -1

scrollback_lines 2000

# TODO: check if this is the best option for viewing scrollback
scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
scrollback_pager_history_size 2

# TODO: check if necessary
# touch_scroll_multiplier 1.0

url_color #e5e5e5
url_style single

copy_on_select yes

strip_trailing_spaces smart

sync_to_monitor yes
enable_audio_bell yes
window_alert_on_bell yes
bell_on_tab yes

window_padding_width 2

placement_strategy center

# TODO: Change this, though I'm not likely to use windows inside kitty anyway
# active_border_color #00ff00

hide_window_decorations yes

confirm_os_window_close 2

tab_bar_style separator

tab_separator " ||"

# TODO: something interesting with this
# tab_title_template "{title}"

#: A template to render the tab title. The default just renders the
#: title. If you wish to include the tab-index as well, use something
#: like: {index}: {title}. Useful if you have shortcuts mapped for
#: goto_tab N. In addition you can use {layout_name} for the current
#: layout name and {num_windows} for the number of windows in the tab.
#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.

# active_tab_title_template none

#: Template to use for active tabs, if not specified falls back to
#: tab_title_template.

# TODO: Theme match these
# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

# TODO: maybe necessary for transparent bg for unfocussed windows
# dynamic_background_opacity no

# Color scheme:

foreground #e5e5e5
background #332a57

selection_foreground #110c24
selection_background #86cbfe

#: black
color0 #000000
color8 #110c24

#: red
color1 #ff7092
color9 #ff8aa4

#: green
color2  #00fbac
color10 #21f6bc

#: yellow
color3  #fffa6a
color11 #fff787

#: blue
color4  #00bfff
color12 #1bccfd

#: magenta
color5  #df95ff
color13 #e6aefe

#: cyan
color6  #86cbfe
color14 #99d6fc

#: white
color7  #e5e5e5
color15 #ffffff

# TODO: do I need these??
# mark1_foreground black
#: Color for marks of type 1
# mark1_background #98d3cb
#: Color for marks of type 1 (light steel blue)
# mark2_foreground black
#: Color for marks of type 2
# mark2_background #f2dcd3
#: Color for marks of type 1 (beige)
# mark3_foreground black
#: Color for marks of type 3
# mark3_background #f274bc
#: Color for marks of type 1 (violet)

#: }}}

#: Advanced {{{

macos_option_as_alt right


macos_quit_when_last_window_closed yes


kitty_mod cmd
clear_all_shortcuts yes

map kitty_mod+n new_os_window
map kitty_mod+t new_tab
map kitty_mod+w close_tab
map kitty_mod+i set_tab_title

map kitty_mod+equal change_font_size all +2.0
map kitty_mod+minus change_font_size all -2.0
map kitty_mod+0 change_font_size all 0


# TODO: check if these are the default
# map cmd+c        copy_to_clipboard
# map kitty_mod+v  paste_from_clipboard
# map cmd+v        paste_from_clipboard
# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection
# map kitty_mod+o  pass_selection_to_program

# TODO: map some of the more useful ones
# map kitty_mod+up        scroll_line_up
# map alt+cmd+page_up     scroll_line_up
# map cmd+up              scroll_line_up
# map kitty_mod+k         scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+j         scroll_line_down
# map alt+cmd+page_down   scroll_line_down
# map cmd+down            scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map cmd+page_up         scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map cmd+page_down       scroll_page_down
# map kitty_mod+home      scroll_home
# map cmd+home            scroll_home
# map kitty_mod+end       scroll_end
# map cmd+end             scroll_end
# map kitty_mod+h         show_scrollback


#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.

# map cmd+n       new_os_window
# map kitty_mod+w close_window
# map shift+cmd+d close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window
# map kitty_mod+1 first_window
# map cmd+1       first_window
# map kitty_mod+2 second_window
# map cmd+2       second_window
# map kitty_mod+3 third_window
# map cmd+3       third_window
# map kitty_mod+4 fourth_window
# map cmd+4       fourth_window
# map kitty_mod+5 fifth_window
# map cmd+5       fifth_window
# map kitty_mod+6 sixth_window
# map cmd+6       sixth_window
# map kitty_mod+7 seventh_window
# map cmd+7       seventh_window
# map kitty_mod+8 eighth_window
# map cmd+8       eighth_window
# map kitty_mod+9 ninth_window
# map cmd+9       ninth_window
# map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

# map kitty_mod+right next_tab
# map ctrl+tab        next_tab
# map shift+cmd+]     next_tab
# map kitty_mod+left  previous_tab
# map shift+ctrl+tab  previous_tab
# map shift+cmd+[     previous_tab
# map shift+cmd+w     close_os_window
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.


#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits

# map kitty_mod+p>n kitten hints --type linenum

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+f10    toggle_maximized
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen::

#:     map ctrl+l combine : clear_terminal scroll active : send_text normal,application \x0c


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

# }}}
